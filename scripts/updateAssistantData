const express = require('express');
const router = express.Router();
const fs = require('fs').promises;
const path = require('path');
const { auth } = require('../middleware/auth');
const { GoogleGenerativeAI } = require('@google/generative-ai');

// Initialize Google Generative AI
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
const model = genAI.getGenerativeModel({ model: "gemini-2.0-flash" });

// Helper function to load company data
async function loadCompanyData() {
    try {
        const companyInfoPath = path.join(__dirname, '..', 'data', 'company_info.json');
        const rawData = await fs.readFile(companyInfoPath, 'utf8');
        return JSON.parse(rawData);
    } catch (error) {
        console.error('Error loading company data:', error);
        return null;
    }
}

// Helper function to format company data for context
function formatCompanyContext(companyData) {
    let context = `
Bạn là trợ lý ảo của VNG Corporation. Dưới đây là thông tin chi tiết về công ty:

THÔNG TIN CƠ BẢN:
- Tên công ty: ${companyData.name}
- Tên giao dịch: ${companyData.tradingName}
- Loại hình: ${companyData.type}
- Thành lập: ${companyData.founded}
- Trụ sở: ${companyData.headquarters}
- Website: ${companyData.website}

LĨNH VỰC HOẠT ĐỘNG:
${companyData.industry.map(ind => `- ${ind}`).join('\n')}

SẢN PHẨM CHÍNH:
${companyData.products.map(prod => `- ${prod}`).join('\n')}

LÃNH ĐẠO CHÍNH:
${companyData.keyPeople.map(person => `- ${person}`).join('\n')}

MÔ TẢ:
${companyData.description}

LỊCH SỬ:
${companyData.structured.history.join('\n')}

GIÁ TRỊ CỐT LÕI:
${companyData.structured.values.join('\n')}

CÁC MỐC PHÁT TRIỂN QUAN TRỌNG:
${companyData.structured.milestones.join('\n')}

TIN TỨC MỚI NHẤT:
${companyData.structured.news.slice(0, 5).map(news => 
    `- ${news.title}\n  ${news.content.substring(0, 200)}...`
).join('\n\n')}

THÔNG TIN TÀI CHÍNH:
${companyData.structured.financialInfo.map(info => 
    `- ${info.title}\n  ${info.content.substring(0, 200)}...`
).join('\n\n')}

HƯỚNG DẪN QUAN TRỌNG:
1. Chỉ trả lời các câu hỏi liên quan đến VNG Corporation và hoạt động của công ty
2. Sử dụng thông tin chính xác từ dữ liệu được cung cấp
3. Nếu không chắc chắn về thông tin, hãy nói rõ là không có thông tin chính xác
4. Trả lời bằng tiếng Việt, thân thiện và chuyên nghiệp
5. Nếu câu hỏi không liên quan đến VNG, lịch sự từ chối và đề nghị đặt câu hỏi về công ty
`;

    return context;
}

// Get chat history
router.get('/history', auth, async (req, res) => {
    try {
        const historyPath = path.join(__dirname, '..', 'data', 'chat_history.json');
        let history = [];
        try {
            const rawHistory = await fs.readFile(historyPath, 'utf8');
            history = JSON.parse(rawHistory);
        } catch (error) {
            // If file doesn't exist, return empty history
            await fs.writeFile(historyPath, '[]', 'utf8');
        }
        
        // Filter history for current user
        const userHistory = history.filter(chat => chat.userId === req.user.id);
        res.json({ chats: userHistory });
    } catch (error) {
        console.error('Error fetching chat history:', error);
        res.status(500).json({ message: 'Lỗi khi tải lịch sử chat' });
    }
});

// Create new chat session
router.post('/new', auth, async (req, res) => {
    try {
        const historyPath = path.join(__dirname, '..', 'data', 'chat_history.json');
        let history = [];
        try {
            const rawHistory = await fs.readFile(historyPath, 'utf8');
            history = JSON.parse(rawHistory);
        } catch (error) {
            history = [];
        }

        // Mark all existing chats for this user as inactive
        history = history.map(chat => 
            chat.userId === req.user.id ? { ...chat, isActive: false } : chat
        );

        // Create new chat
        const newChat = {
            _id: Date.now().toString(),
            title: 'Chat mới',
            userId: req.user.id,
            messages: [],
            isActive: true,
            createdAt: new Date().toISOString()
        };

        history.push(newChat);
        await fs.writeFile(historyPath, JSON.stringify(history, null, 2), 'utf8');
        
        res.json({ chat: newChat });
    } catch (error) {
        console.error('Error creating new chat:', error);
        res.status(500).json({ message: 'Lỗi khi tạo đoạn chat mới' });
    }
});

// Send message in chat
router.post('/message', auth, async (req, res) => {
    try {
        const { message, chatId } = req.body;
        if (!message) {
            return res.status(400).json({ message: 'Tin nhắn không được để trống' });
        }

        // Load company data
        const companyData = await loadCompanyData();
        if (!companyData) {
            throw new Error('Could not load company data');
        }

        // Format context for AI
        const context = formatCompanyContext(companyData);

        // Process with Gemini AI
        const prompt = `${context}\n\nCâu hỏi của người dùng: ${message}\n\nTrả lời (bằng tiếng Việt, dựa trên thông tin công ty):`;
        
        const result = await model.generateContent(prompt);
        const aiResponse = result.response.text();

        // Update chat history
        const historyPath = path.join(__dirname, '..', 'data', 'chat_history.json');
        let history = [];
        try {
            const rawHistory = await fs.readFile(historyPath, 'utf8');
            history = JSON.parse(rawHistory);
        } catch (error) {
            history = [];
        }

        // Find and update the active chat
        const chatIndex = history.findIndex(chat => 
            chat._id === chatId && chat.userId === req.user.id
        );

        if (chatIndex === -1) {
            throw new Error('Chat not found');
        }

        // Add messages
        const timestamp = new Date().toISOString();
        history[chatIndex].messages.push(
            {
                sender: 'user',
                content: message,
                timestamp
            },
            {
                sender: 'assistant',
                content: aiResponse,
                timestamp
            }
        );

        // Update chat title if it's the first message
        if (history[chatIndex].messages.length === 2) {
            history[chatIndex].title = message.substring(0, 50) + (message.length > 50 ? '...' : '');
        }

        await fs.writeFile(historyPath, JSON.stringify(history, null, 2), 'utf8');

        res.json({ 
            response: aiResponse,
            chat: history[chatIndex]
        });
    } catch (error) {
        console.error('Error processing chat:', error);
        res.status(500).json({ message: 'Lỗi khi xử lý tin nhắn' });
    }
});

// Resume chat session
router.post('/resume/:id', auth, async (req, res) => {
    try {
        const historyPath = path.join(__dirname, '..', 'data', 'chat_history.json');
        let history = [];
        try {
            const rawHistory = await fs.readFile(historyPath, 'utf8');
            history = JSON.parse(rawHistory);
        } catch (error) {
            history = [];
        }

        // Mark all chats as inactive
        history = history.map(chat => 
            chat.userId === req.user.id ? { ...chat, isActive: false } : chat
        );

        // Find and activate requested chat
        const chatIndex = history.findIndex(chat => 
            chat._id === req.params.id && chat.userId === req.user.id
        );

        if (chatIndex === -1) {
            return res.status(404).json({ message: 'Không tìm thấy đoạn chat' });
        }

        history[chatIndex].isActive = true;
        await fs.writeFile(historyPath, JSON.stringify(history, null, 2), 'utf8');
        
        res.json({ chat: history[chatIndex] });
    } catch (error) {
        console.error('Error resuming chat:', error);
        res.status(500).json({ message: 'Lỗi khi khôi phục đoạn chat' });
    }
});

// Delete chat
router.delete('/chat/:id', auth, async (req, res) => {
    try {
        const historyPath = path.join(__dirname, '..', 'data', 'chat_history.json');
        let history = [];
        try {
            const rawHistory = await fs.readFile(historyPath, 'utf8');
            history = JSON.parse(rawHistory);
        } catch (error) {
            history = [];
        }

        // Remove the chat
        history = history.filter(chat => 
            !(chat._id === req.params.id && chat.userId === req.user.id)
        );

        await fs.writeFile(historyPath, JSON.stringify(history, null, 2), 'utf8');
        
        res.json({ message: 'Đã xóa đoạn chat' });
    } catch (error) {
        console.error('Error deleting chat:', error);
        res.status(500).json({ message: 'Lỗi khi xóa đoạn chat' });
    }
});

module.exports = router;
